exit
@posts[1].content
@posts[0].content
@posts.size
@posts
exit
@posts.class
@posts.size
@posts = Post.all_posts(current_user)
exit
@posts = Post.all_posts(current_user)
exit
@posts.size
@posts =(Post.where.not(user: current_user.friends).merge(Post.where.not(user: current_user)))
@posts =(Post.where(user: current_user.friends).merge(Post.where(user: current_user)))
@posts =Post.where.not(Post.where(user: current_user.friends).merge(Post.where(user: current_user)))
@posts =Post.where.not(Post.where.not(user: current_user.friends).merge(Post.where.not(user: current_user)))
@posts =Post.where(Post.where.not(user: current_user.friends).merge(Post.where.not(user: current_user)))
@posts =Post.where.not(Post.where.not(user: current_user.friends).merge(Post.where.not(user: current_user)))
@posts.size
@posts = Post.where.not(user: current_user.friends).merge(Post.where.not(user: current_user))
@posts = Post.where(user: current_user.friends).merge(Post.where(user: current_user))
@posts.size
@posts = Post.where.not(user: current_user.friends)
@posts = Post.where.not((user: current_user.friends))
@posts = Post.where.not((user: current_user) OR (user: current_user.friends))
@posts.size
@posts = Post.where.not(user: current_user)
@posts = Post.where(user: current_user)
@posts = Post.where.not((user: current_user))
@posts = Post.where.not(where.not(user: current_user))
@posts = Post.where.none(user: current_user).merge(Post.where.not(user: current_user.friends))
@posts.size
@posts = Post.where.not(user: current_user).merge(Post.where.not(user: current_user.friends))
@posts = Post.user_posts(current_user).or(Post.friend_posts(current_user))
@posts.size
@posts = Post.all_posts(current_user)
exit
@posts.size
@posts = Post.all_posts(current_user)
exit
@posts.class
@posts.size
@posts = Post.user_posts(current_user)+(Post.friend_posts(current_user))
@posts = Post.user_posts(current_user).or(Post.friend_posts(current_user))
@posts.size
@posts = Post.user_posts(current_user).merge(Post.friend_posts(current_user))
@posts.size
@posts = Post.friend_posts(current_user)
@posts = Post.user_posts(current_user)
@posts.size
@posts = Post.all_posts(current_user)
exit
@posts.size
@posts = Post.all_posts(current_user)
exit
@posts = Post.all_posts(current_user)
exit
@posts.class
@posts.size
@posts
@post
@posts = Post.all_posts(current_user)
@posts = @posts = Post.all_posts(current_user)
exit
@posts = @posts = Post.all_posts(current_user)
exit
@posts = @posts = Post.all_posts(current_user)
exit
@posts = Post.all_posts(current_user)
exit
@posts = Post.all_posts(current_user)
exit
@posts = Post.all_posts(current_user)
exit
@posts = Post.all_posts(current_user)
exit
@posts.size
@posts = Post.all_posts(current_user)
exit
user = Post.user_posts(current_user).or(Post.friend_posts(current_user))
user.size
user = Post.user_posts(current_user).merge(Post.friend_posts(current_user))
user = Post.user_posts(current_user).merge(Post.friend_posts(current_user)
user2.size
user2 = Post.friend_posts(current_user)
user.size
user = Post.user_posts(current_user)
exit
@posts = Post.all_posts(current_user)
exit
@posts.class
@posts = Post.all_posts(current_user)
exit
@posts = Post.all_posts(current_user).class
@posts = Post.all_posts(current_user).size
@posts = Post.all_posts(current_user)
@posts = Post.user_posts(current_user).merge(Post.friend_posts(current_user))
exit
my_posts.size
my_posts.class
my_posts = Post.user_posts(current_user).merge(Post.friend_posts(current_user))
my_posts = Post.friend_posts(current_user)
my_posts = Post.user_posts(current_user)
my_posts = Post.user_posts
current_user
exit
posts.class
posts.joins(:post_tags)
posts.join(:post_tags)
posts
posts = Post.all_posts(current_user)
current_user
@tag
exit
u = self.tags.build(tag_attribute)
tag_attribute
exit
@posts.size
exit
@posts.last
@posts = Post.all_posts(current_user)
current_user
exit
u = User.first
u = User.find_by_id(50)
params[:user_id].to_i
user = User.find(params[:user_id].to_i)
params[:user_id]
params
user = User.find(params[:user_id])
user = User.find_by(params[:user_id])
user = User.find_by_id(params[:user_id])
params
exit
tag_attribute
self.tags.build(tag_attribute)
exit
self.tags.build(Tag.find_or_create_by(tag_attribute))exit
post_params[:tags_attributes][:name]
post_params[:tags_attributes]
post_params[:content]
post_params
post_params[tags_attributes[:name]]
post_params
exit
params
exit
self.tags.build(Tag.first_or_create(tags_attributes))
self.tags.build(Tag.first_or_create(tag_attributes))
self.tags.build(Tag.first_or_create(tag_attribute))
self.tags.build(Tag.first_or_create_by(tag_attribute))
self.tags.build(Tag.find_or_create_by(tag_attribute))
u = Tag.find_or_create_by(tag_attribute)
u.save
u = self.tags.build(tag_attribute)
tag_attribute
self.tags.build(Tag.find_or_create_by(tag_attribute))
self
exit
attr[:name]
attr
exit
params
exit
params
exit
params
exit
tag_form.methods
tag_form.object
tag_form.name
tag_form.methods
tag_form.object
exit
tag_form.object
tag_for.object
exit
tag_form.methods
tag_form.class
tag_form.object
f.object
exit
f.object
f.class
f
f.
f.object
f.objects
exit
params
exit
params
exit
params
exit
self.tags
self
tag[:name].empty?
tag[:name]
tag
exit
Post.exists?(params[:id])
Post.exists(params[:id])
params[:id].persist
params[:id].persist?
params[:id].exists?
params[:id]
exit
tag
b = Friendship.create(user: friend, friend: user, status: 'requested')
a = Friendship.create(user: user, friend: friend, status: 'pending')
friend
user
exit
params
exit
user == current_user
user
current_user
!!Friendship.friend_exists?(current_user, user)
Friendship.friend_exists?(current_user, user)
exit
!!self.find_by_user_id_and_friend_id(user, friend)
user
exit
friend
user
!!self.find_by_user_id_and_friend_id(user, friend)
self.find_by_user_id_and_friend_id(user, friend)
!self.find_by_user_id_and_friend_id(user, friend).nil?
not self.find_by_user_id_and_friend_id(user, friend).nil?
user = self.find_by_user_id_and_friend_id(user, friend).nil?
user = self.find_by_user_id_and_friend_id(user, friend)
self
user
friend
exit
friend
user
exit
tag_ids
exit
user
current_scope
current_user
exit
@post = current_user.posts.build(post_params)
post_params
params
exit
params
exit
post_params
@post.tags
@post.save
